@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PoBabyNames.Data
@using PoBabyNames.Models
@using Microsoft.AspNetCore.Authorization
@inject DataImportService DataImportService
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Top 10 names decided by group: @groupName</h1>

        <button @onclick="ImportData" disabled="@isImporting">Import Data</button>
        <RadzenButton Text="Clear current user data" Click="@ClearData" Style="margin-left: 10px;" />
        @if (isImporting)
        {
            <p><em>Importing data...</em></p>
        }
        else if (!string.IsNullOrEmpty(importMessage))
        {
            <p>@importMessage</p>
        }

        <RadzenGrid Data="@namesList" TItem="NameViewModel" ColumnWidth="auto" Style="width:100%">
            <Columns>
                <RadzenGridColumn TItem="NameViewModel" Property="NameText" Title="Name" />
                <RadzenGridColumn TItem="NameViewModel" Property="AverageRating" Title="Average Rating" />
            </Columns>
        </RadzenGrid>
    </Authorized>
    <NotAuthorized>
        <h3>User must log in</h3>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isImporting = false;
    private string importMessage;
    private string groupName;
    private Models.Group? currentGroup;
    private List<NameViewModel> namesList = new List<NameViewModel>();
    private List<RatedNameViewModel> ratedNames = new List<RatedNameViewModel>();
    private int? groupId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User.Identity.IsAuthenticated ? await UserManager.GetUserAsync(authState.User) : null;

        if (currentUser == null)
        {
            NavigationManager.NavigateTo("account/login", true);
            return;
        }

        currentGroup = await DbContext.Groups.FindAsync(currentUser.GroupId);
        groupName = currentGroup?.GroupName ?? "No group assigned";

        if (currentGroup != null)
        {
            namesList = await LoadNamesAsync(currentUser.GroupId.Value);
            ratedNames = await LoadRatedNamesAsync(currentUser.GroupId.Value);
        }
    }

    private async Task<List<NameViewModel>> LoadNamesAsync(int groupId)
    {
        var userId = (await
        AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var names = await DbContext.Names
        .Where(n => DbContext.Ratings.Any(r => r.NameId == n.Id && r.UserId == userId && r.GroupId == groupId))
        .ToListAsync();

        var namesList = names.Select(async name =>
        {
            var ratings = await DbContext.Ratings.Where(r => r.NameId == name.Id && r.GroupId == groupId).ToListAsync();
            var averageRating = ratings.Any() ? ratings.Average(r => r.RatingValue) : 0.0;

            var userRatings = ratings.ToDictionary(
    r => r.UserId.ToString(),
    r => int.Parse(r.RatingValue.ToString())
    );

            return new NameViewModel
                {
                    NameText = name.NameText,
                    AverageRating = averageRating,
                    UserRatings = userRatings
                };
        }).ToList();

        return (await Task.WhenAll(namesList))
        .OrderByDescending(n => n.AverageRating)
        .Take(10)
        .ToList();
    }



    private async Task ClearData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = await UserManager.GetUserAsync(authState.User);

        if (currentUser != null)
        {
            var userRatings = DbContext.Ratings.Where(r => r.UserId == currentUser.Id);
            DbContext.Ratings.RemoveRange(userRatings);
            DbContext.Groups.RemoveRange(DbContext.Groups); // Added line to remove all groups
            DbContext.Users.Remove(currentUser);
            await DbContext.SaveChangesAsync();
            namesList.Clear();
            ratedNames.Clear();
            await SignInManager.SignOutAsync(); // Log out the user
            NavigationManager.NavigateTo("/", true);
        }
    }

    private async Task<List<RatedNameViewModel>> LoadRatedNamesAsync(int groupId)
    {
        var userId = (await
        AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var ratedNames = await DbContext.Ratings
        .Where(r => r.GroupId == groupId && r.UserId == userId)
        .Select(r => new RatedNameViewModel
            {
                NameId = r.NameId,
                RatingValue = r.RatingValue
            })
        .ToListAsync();

        return ratedNames;
    }


    private async Task ImportData()
    {
        isImporting = true;
        importMessage = null;

        try
        {
            await DataImportService.ImportCsv();
            importMessage = "Data import successful!";
        }
        catch (Exception ex)
        {
            importMessage = $"Data import failed: {ex.Message}";
        }
        finally
        {
            isImporting = false;
        }
    }



    // private async Task ImportData(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     if (file != null)
    //     {
    //         using var stream = file.OpenReadStream();
    //         await DataImportService.ImportCsv(stream);
    //     }
    // }

    // private async void OnSubmit()
    // {
    //     //     foreach (var file in selectedFiles)
    //     //     {
    //     //         Stream stream = file.OpenReadStream();
    //     //         var path = $"{env.WebRootPath}\\{file.Name}";
    //     //         FileStream fs = File.Create(path);
    //     //         await stream.CopyToAsync(fs);
    //     //         stream.Close();
    //     //         fs.Close();
    //     //     }
    //     //     Message = $"{selectedFiles.Count} file(s)
    //     // uploaded on server";
    //     this.StateHasChanged();
    // }
}
